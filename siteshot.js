#!/usr/bin/env node
// Generated by CoffeeScript 1.6.3
(function() {
  var SiteShot, async, fs, mkdirp, parseString, path, phantom, url, _;

  fs = require('fs');

  url = require('url');

  path = require('path');

  _ = require('lodash');

  parseString = require('xml2js').parseString;

  phantom = require('phantom');

  async = require('async');

  mkdirp = require('mkdirp');

  SiteShot = (function() {
    function SiteShot() {
      var config,
        _this = this;
      if (process.argv.indexOf('config') !== -1) {
        this.config();
      } else {
        config = require("" + (process.cwd()) + "/siteshot.json");
        parseString(fs.readFileSync(config.sitemap), function(err, result) {
          var routes;
          if (err != null) {
            throw err;
          } else {
            routes = _.flatten(_.pluck(result.urlset.url, 'loc'));
            return phantom.create(function(ph) {
              var pageLoad;
              pageLoad = function(route, callback) {
                return ph.createPage(function(page) {
                  return page.open(route, function(status) {
                    if (status === 'success') {
                      return page.evaluate((function() {
                        return document.documentElement.outerHTML;
                      }), function(res) {
                        var snapPath, snapPrefix;
                        snapPrefix = url.parse(route).path === '/' ? '/index' : url.parse(route).path;
                        snapPath = "" + config.snapshotDir + snapPrefix + ".html";
                        return mkdirp(path.dirname(snapPath), function(err) {
                          if (err != null) {
                            throw err;
                          }
                          return fs.writeFile(snapPath, res, function(err) {
                            if (err != null) {
                              throw err;
                            }
                            page.close();
                            console.log("Finish loading " + route + " and save it in " + snapPath);
                            return callback();
                          });
                        });
                      });
                    }
                  });
                });
              };
              return async.eachSeries(routes, pageLoad, function(err) {
                if (err != null) {
                  throw err;
                }
                console.log('----------------------------');
                console.log('Finish snapshots');
                return ph.exit();
              });
            });
          }
        });
      }
    }

    SiteShot.prototype.config = function() {
      var example;
      example = {
        snapshotDir: "" + (process.cwd()) + "/snapshots",
        sitemap: "" + (process.cwd()) + "/sitemap.xml"
      };
      return fs.writeFileSync('siteshot.json', JSON.stringify(example, null, 2));
    };

    return SiteShot;

  })();

  module.exports = SiteShot;

  new SiteShot;

}).call(this);
